class ArrayList {
    init() {
        this.size = 0;
    }

    add(element) {
        this.ensureCapacity(this.size + 1);
        this.array.set(this.size, element);
        this.size = this.size + 1;
    }

    addAll(elements) {
        this.ensureCapacity(this.size + elements.length());
        for (var i = 0; i < elements.length(); i++) {
            this.add(elements[i]);
        }
    }

    get(i) = this.array.get(i)
    set(i, value) {
        if (i < 0 or i >= this.size) {
            return Error("Index out of bounds");
        }

        var oldValue = this.array.get(i);
        this.array.set(i, value);
        return oldValue;
    }

    forEach(function) {
        for (var i = 0; i < this.size; i++) {
            function(this.array.get(i));
        }
    }

    forEachIndexed(function) {
        for (var i = 0; i < this.size; i++) {
            function(i, this.array.get(i));
        }
    }

    clear() {
        this.size = 0;
        this.array = nil;
    }

    length() = this.size
    first() = this.get(0)
    last() = this.get(this.size - 1)

    lastIndex {
        return this.length() - 1;
    }

    map(function) = this.mapIndexed(fun (i, e) = function(e))

    mapIndexed(function) {
        var length = this.length();
        var result = ArrayList();
        result.size = length;
        result.ensureCapacity(length);
        for (var i = 0; i < length; i++) {
            result.set(i, function(i, this.get(i)));
        }
        return result;
    }

    flatMapIndexed(function) {
        var length = this.length();
        var result = ArrayList();
        for (var i = 0; i < length; i++) {
            var element = function(i, this.get(i));
            if (element is ArrayList or element is Array) {
                result.addAll(element);
            } else {
                result.add(element);
            }
        }
        return result;
    }

    flatMap(function) = this.flatMapIndexed(fun (i, e) = function(e))

    flatten() = this.flatMap(fun (e) = e)

    withIndex() = this.mapIndexed(fun (i, e) = Pair(i, e))

    count(function) = this.reduce(0, fun (acc, e) {
        if (function(e)) return acc + 1; else return acc;
    })

    contains(value) = this.indexOf(value) != -1

    indexOf(value) {
        var length = this.length();
        for (var i = 0; i < length; i++) {
            if (this.get(i) == value) {
                return i;
            }
        }
        return -1;
    }

    reduce(initial, function) {
        var length = this.length();
        var result = initial;
        for (var i = 0; i < length; i++) {
            result = function(result, this.get(i));
        }
        return result;
    }

    filter(function) {
        var length = this.length();
        var result = ArrayList();
        var resultLength = 0;

        for (var i = 0; i < length; i++) {
            var value = this.get(i);
            if (function(value)) result.add(value);
        }

        return result;
    }

    filterNot(function) = this.filter(fun (e) = !function(e))

    remove(i) {
        if (i < 0 or i >= this.size) {
            return Error("Index out of bounds");
        }

        var newArray = Array(this.size - 1);
        System.arraycopy(this.array, 0, newArray, 0, i);
        System.arraycopy(this.array, i + 1, newArray, i, this.size - i - 1);
        this.size = this.size - 1;
        this.array = newArray;
    }

    removeIf(function) {
        var length = this.length();
        var toRemove = Array(length);
        var toRemoveLength = 0;
        // TODO: use a bitset here
        for (var i = 0; i < length; i++) {
            if (function(this.get(i)))  {
                toRemove[i] = true;
                toRemoveLength = toRemoveLength + 1;
            }
        }

        if (toRemoveLength > 0) {
            var newSize = this.size - toRemoveLength;

            fun nextKept(n) {
                for (var i = n; i < length; i++) {
                    if (toRemove[i] == nil) return i;
                }
            }

            // Shift kept elements together
            for (var i = 0, j = 0; i < length and j < newSize; i++, j++) {
                this.array.set(j, this.array.get(i = nextKept(i)));
            }

            // Nullify trailing elements
            for (var k = newSize; k < this.size; k++) {
                this.array.set(k, nil);
            }

            this.size = newSize;

            return true;
        }

        return false;
    }

    copy() {
        var result = ArrayList();
        result.size = this.size;
        result.ensureCapacity(this.size);
        System.arraycopy(this.array, 0, result.array, 0, this.size);
        return result;
    }

    ensureCapacity(n) {
        if (this?.array == nil) this.array = Array(n);

        if (n > this.array.length()) {
            var newArray = Array(n * 2);
            System.arraycopy(this.array, 0, newArray, 0, this.size);
            this.array = newArray;
        }
    }

    trimToSize() {
        var newArray = Array(this.size);
        System.arraycopy(this.array, 0, newArray, 0, this.size);
        this.array = newArray;
    }

    iterator() = ArrayIterator(this)

    toArray() {
        var result = Array(this.size);
        System.arraycopy(this.array, 0, result, 0, this.size);
        return result;
    }

    toString() {
        return "ArrayList(" + this.size + ")";
    }
}
