class Object {

    // TODO implement toString() in klox
    //      this requires first methods to introspect the instance's class to get the name of the class
    //      because the default toString() should return "$className instance"
}

/**
 * KLox `Error` class which indicates an error occurred.
 *
 * Can be used with `is` for error checking e.g.
 *
 * fun foo(a, b) {
 *     if (b == 0) return Error("Cannot divide by zero");
 *     else return a / b;
 * }
 *
 * var result = foo(1, 0);
 *
 * if (result is Error)
 *    print result.message;
 * else
 *    print result;
 */
class Error {
    init(message) {
        this.message = message;
        this.code = nil;
    }

    toString() {
        return this.message;
    }
}

class System {

    /**
    * Returns the command-line argument for the given index.
    */
    class arg(index) {
        System.fail(Error("Native implementation for 'arg' not provided."));
    }

    class clock() {
        System.fail(Error("Native implementation for 'clock' not provided."));
    }

    class exit(code) {
        return Error("Native implementation for 'exit' not provided.");
    }

    class fail(error) {
        var code = -1;
        if (error is Error and error.code != nil) code = error.code;
        print error;
        System.exit(code);
    }
}

// Alias clock function for compatibility with lox.
var clock = System.clock;

// TODO: ordering of class definitions is important, figure out a better way to do this that doesn't rely on the order.
class String {

    class length(str) {
        System.fail(Error("Native implementation for 'length' not provided."));
    }

    class substr(str, start, end) {
        System.fail(Error("Native implementation for 'substr' not provided."));
    }

    class charAt(str, index) {
        return String.substr(str, index, index + 1);
    }

    class indexOf(str, search) {
        var result = -1;
        var length = String.length(str);
        var searchLength = String.length(search);
        for (var i = 0; i < length; i = i + 1) {
            var end = i + searchLength;
            if (end > length) end = length;
            if (String.substr(str, i, end) == search) {
                result = i;
                break;
            }
        }
        return result;
    }

    class toNumber(str) {
        System.fail(Error("Native implementation for 'toNumber' not provided."));
    }
}

// Aliases for common top-level string functions.
var strlen = String.length;
var substr = String.substr;

class Array {
    init(size) {
        System.fail(Error("Native implementation for 'Array' not provided."));
    }

    get(i) {
        System.fail(Error("Native implementation for 'get' not provided."));
    }

    set(i, value) {
        System.fail(Error("Native implementation for 'set' not provided."));
    }

    length() {
        System.fail(Error("Native implementation for 'length' not provided."));
    }

    class copy(src, srcPos, dest, destPos, length) {
        System.fail(Error("Native implementation for 'copy' not provided."));
    }

    map(function) {
        var length = this.length();
        var result = Array(length);
        for (var i = 0; i < length; i = i + 1) {
            result.set(i, function(this.get(i)));
        }
        return result;
    }

    reduce(initial, function) {
        var length = this.length();
        var result = initial;
        for (var i = 0; i < length; i = i + 1) {
            result = function(result, this.get(i));
        }
        return result;
    }

    filter(function) {
        var length = this.length();
        var result = Array(length);
        var resultLength = 0;

        for (var i = 0; i < length; i = i + 1) {
            var value = this.get(i);
            if (function(value)) {
                result.set(resultLength, value);
                resultLength = resultLength + 1;
            }
        }

        var shrunkResult = Array(resultLength);
        Array.copy(result, 0, shrunkResult, 0, resultLength);
        return shrunkResult;
    }

    toString() {
        return "Array(" + this.length() + ")";
    }
}