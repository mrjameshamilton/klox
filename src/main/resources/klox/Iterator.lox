class Iterator {
    next() {
        System.fail("Abstract method");
    }

    hasNext() {
        System.fail("Abstract method");
    }
}

class ArrayIterator < Iterator {
    init(array) {
        this.array = array;
        this.index = 0;
    }

    hasNext() {
        return this.index < this.array.length();
    }

    next() {
        if (this.index >= this.array.length()) {
            return nil;
        }

        var result = this.array.get(this.index);
        this.index = this.index + 1;
        return result;
    }
}

class IntRange {
    init(start, end, step) {
        this.start = start;
        this.end = end;
        this.step = step;
        this.current = start;
    }

    iterator() {
        class IntRange < Iterator {
            init(start, end, step) {
                this.start = start;
                this.end = end;
                this.step = step;
                this.current = start;
            }

            hasNext() = this.current <= this.end

            next() {
                var result = this.current;
                this.current = this.current + this.step;
                return result;
            }
        }

        return IntRange(this.start, this.end, this.step);
    }
}

class CharRange {
    init(start, end, step) {
        // TODO: error handling in constructors?
        this.start = Character.toCharCode(String.charAt(start, 0).orElse(0)).orElse(0);
        this.end = Character.toCharCode(String.charAt(end, 0).orElse(0)).orElse(0);
        this.step = step;
        this.current = this.start;
    }

    iterator() {
        class CharRange < Iterator {
            init(start, end, step) {
                this.start = start;
                this.end = end;
                this.step = step;
                this.current = start;
            }

            hasNext() = this.current <= this.end

            next() {
                var result = this.current;
                this.current = this.current + this.step;
                return Character.fromCharCode(result);
            }
        }

        return CharRange(this.start, this.end, this.step);
    }
}
