class Array {
    init(size) {
        System.fail(Error("Native implementation for 'Array' not provided."));
    }

    get(i) {
        System.fail(Error("Native implementation for 'get' not provided."));
    }

    set(i, value) {
        System.fail(Error("Native implementation for 'set' not provided."));
    }

    length() {
        System.fail(Error("Native implementation for 'length' not provided."));
    }

    class copy(src, srcPos, dest, destPos, length) {
        System.fail(Error("Native implementation for 'copy' not provided."));
    }

    map(function) {
        var length = this.length();
        var result = Array(length);
        for (var i = 0; i < length; i = i + 1) {
            result.set(i, function(this.get(i)));
        }
        return result;
    }

    reduce(initial, function) {
        var length = this.length();
        var result = initial;
        for (var i = 0; i < length; i = i + 1) {
            result = function(result, this.get(i));
        }
        return result;
    }

    filter(function) {
        var length = this.length();
        var result = Array(length);
        var resultLength = 0;

        for (var i = 0; i < length; i = i + 1) {
            var value = this.get(i);
            if (function(value)) {
                result.set(resultLength, value);
                resultLength = resultLength + 1;
            }
        }

        var shrunkResult = Array(resultLength);
        Array.copy(result, 0, shrunkResult, 0, resultLength);
        return shrunkResult;
    }

    slice(start, stop, step) {
        // Slice implementation based on cpython implementation.

        if (((start == nil and stop == nil) or (start == 0 and stop == this.length())) and (step == 1 or step == nil)) {
            var result = Array(this.length());
            Array.copy(this, 0, result, 0, this.length());
            return result;
        }

        fun adjust_endpoint(length, endpoint, step) {
            if (endpoint < 0) {
                endpoint = length + endpoint;
                if (endpoint < 0) {
                    if (step < 0) endpoint = -1; else endpoint = 0;
                }
            } else if (endpoint >= length) {
                if (step < 0) endpoint = length - 1; else endpoint = length;
            }

            return endpoint;
        }

        fun adjust_slice(length, start, stop, step) {
            if (step == nil) step = 1;
            if (step == 0) return Error("Step cannot be zero.");

            if (start == nil) {
                if (step < 0) start = length - 1; else start = 0;
            } else {
                start = adjust_endpoint(length, start, step);
            }

            if (stop == nil) {
                if (step < 0) stop = -1; else stop = length;
            } else {
                stop = adjust_endpoint(length, stop, step);
            }

            return [start, stop, step];
        }

        fun indices(length, originalStart, originalStop, originalStep) {
            var (start, stop, step) = adjust_slice(length, originalStart, originalStop, originalStep);

            var sliceLength;
            if ((step < 0 and stop >= start) or (step > 0 and start >= stop)) {
                sliceLength = 0;
            } else if (step < 0) {
                sliceLength = Math.floor((stop - start + 1) / step + 1);
            } else {
                sliceLength = Math.floor((stop - start - 1) / step + 1);
            }

            var result = Array(sliceLength);

            for (var index = start, i = 0; i < sliceLength; i = i + 1, index = index + step) {
                result[i] = index;
            }

            return result;
        }

        return indices(this.length(), start, stop, step).map(fun (index) {
            return this[index];
        });
    }

    toString() {
        return "Array(" + this.length() + ")";
    }
}
